// Generated by CoffeeScript 1.4.0
(function() {
  var Match, Player;

  Object.forEach = function(object, callback) {
    var key, value, _results;
    _results = [];
    for (key in object) {
      value = object[key];
      _results.push(callback(value, name));
    }
    return _results;
  };

  Object.size = function(object) {
    var key, size;
    size = 0;
    for (key in object) {
      size++;
    }
    return size;
  };

  Player = (function() {

    function Player(name, clan, id) {
      this.name = name;
      this.clan = clan;
      this.id = id;
    }

    return Player;

  })();

  Match = (function() {
    var makeMatchName;

    makeMatchName = function(player1, player2) {
      return "m_" + player1.id + "@" + player2.id;
    };

    function Match(player1, player2) {
      this.id = makeMatchName(player1, player2);
      this.players = {};
      this.players[player1.id] = player1;
      this.players[player2.id] = player2;
    }

    return Match;

  })();

  this.SwissTournament = (function() {
    var nextPlayerId, playerCount;

    function SwissTournament() {}

    playerCount = 0;

    nextPlayerId = function() {
      return "p" + ++playerCount;
    };

    SwissTournament.prototype.players = {};

    SwissTournament.prototype.addPlayer = function(name, clan) {
      var player;
      player = new Player(name, clan, nextPlayerId());
      return this.players[player.id] = player;
    };

    SwissTournament.prototype.getPlayer = function(playerId) {
      return this.players[playerId];
    };

    SwissTournament.prototype.matches = {};

    SwissTournament.prototype.addMatch = function(player1Id, player2Id) {
      var match, player1, player2;
      player1 = this.getPlayer(player1Id);
      player2 = this.getPlayer(player2Id);
      match = new Match(player1, player2);
      return this.matches[match.id] = match;
    };

    return SwissTournament;

  })();

}).call(this);
