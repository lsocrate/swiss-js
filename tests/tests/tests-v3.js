// Generated by CoffeeScript 1.4.0
(function() {

  module("Player", {
    setup: function() {
      return this.tournament = new SwissTournament;
    }
  });

  test("Add player", function() {
    this.tournament.addPlayer("Anna", "Scorpion");
    return ok(this.tournament.players.p1);
  });

  test("Get player", function() {
    var player;
    this.tournament.addPlayer("Anna", "Scorpion");
    this.tournament.addPlayer("Bob", "Crane");
    player = this.tournament.getPlayer("p1");
    return ok(player);
  });

  module("Matches", {
    setup: function() {
      this.tournament = new SwissTournament;
      this.tournament.addPlayer("Anna", "Crab");
      this.tournament.addPlayer("Bob", "Crane");
      this.tournament.addPlayer("Claude", "Dragon");
      this.tournament.addPlayer("Dennis", "Lion");
      this.tournament.addPlayer("Eliot", "Mantis");
      this.tournament.addPlayer("Francis", "Phoenix");
      this.tournament.addPlayer("George", "Scorpion");
      this.tournament.addPlayer("Henry", "Spider");
      this.tournament.addPlayer("Irvine", "Unaligned");
      return this.tournament.addPlayer("Juliet", "Unaligned");
    }
  });

  test("Add match", function() {
    var player1, player2;
    this.tournament.addMatch("p1", "p2");
    player1 = this.tournament.getPlayer("p1");
    player2 = this.tournament.getPlayer("p2");
    ok(this.tournament.matches["m_p1@p2"]);
    ok(player1.opponents.p2);
    return ok(player2.opponents.p1);
  });

  test("Get match", function() {
    var match;
    this.tournament.addMatch("p1", "p2");
    match = this.tournament.getMatch("p1", "p2");
    ok(match.players.p1);
    return ok(match.players.p2);
  });

  test("Get player matches", function() {
    var matches;
    this.tournament.addMatch("p1", "p2");
    this.tournament.addMatch("p1", "p3");
    this.tournament.addMatch("p1", "p4");
    matches = this.tournament.getPlayerMatches(this.tournament.getPlayer("p1"));
    ok(matches["m_p1@p2"]);
    ok(matches["m_p1@p3"]);
    return ok(matches["m_p1@p4"]);
  });

  test("Report match victory", function() {
    var match, winner;
    this.tournament.addMatch("p1", "p2");
    match = this.tournament.getMatch("p1", "p2");
    winner = this.tournament.getPlayer("p1");
    match.reportWinner(winner);
    equal("p1", match.winner.id);
    equal("p2", match.loser.id);
    equal(1, match.winner.points);
    equal(0, match.loser.points);
    ok(match.winner.opponents["p2"]);
    return ok(match.loser.opponents["p1"]);
  });

  test("Report double loss", function() {
    var match, player1, player2;
    this.tournament.addMatch("p3", "p4");
    match = this.tournament.getMatch("p3", "p4");
    player1 = this.tournament.getPlayer("p3");
    player2 = this.tournament.getPlayer("p4");
    match.reportDoubleLoss();
    equal(0, player1.points);
    equal(0, player2.points);
    equal(2, match.losers.length);
    ok(match.drawed);
    ok(player1.opponents["p4"]);
    return ok(player2.opponents["p3"]);
  });

  module("Match Matrix", {
    setup: function() {
      this.tournament = new SwissTournament;
      this.tournament.addPlayer("Anna", "Crab");
      this.tournament.addPlayer("Bob", "Crane");
      this.tournament.addPlayer("Claude", "Dragon");
      this.tournament.addPlayer("Dennis", "Lion");
      this.tournament.addPlayer("Eliot", "Mantis");
      this.tournament.addPlayer("Francis", "Phoenix");
      this.tournament.addPlayer("George", "Scorpion");
      this.tournament.addPlayer("Henry", "Spider");
      this.tournament.addPlayer("Irvine", "Unaligned");
      this.tournament.addPlayer("Juliet", "Unaligned");
      return this.players = [this.tournament.getPlayer("p1"), this.tournament.getPlayer("p2"), this.tournament.getPlayer("p3"), this.tournament.getPlayer("p4"), this.tournament.getPlayer("p5")];
    }
  });

  test("Get match matrix", function() {
    var matrix, matrixSize;
    this.tournament.addMatch("p1", "p2");
    matrix = this.tournament.getMatchMatrixForPlayers(this.players);
    matrixSize = Object.keys(matrix.matches).length;
    equal(matrixSize, 9);
    ok(matrix.matches["m_p1@p3"]);
    ok(matrix.matches["m_p1@p4"]);
    ok(matrix.matches["m_p1@p5"]);
    ok(matrix.matches["m_p2@p3"]);
    ok(matrix.matches["m_p2@p4"]);
    ok(matrix.matches["m_p2@p5"]);
    ok(matrix.matches["m_p3@p4"]);
    ok(matrix.matches["m_p3@p5"]);
    return ok(matrix.matches["m_p4@p5"]);
  });

  test("Get unique matches which are the only possible for some of it's players", function() {
    var matrix, matrixSize, singularMatches, singularMatchesSize;
    this.tournament.addMatch("p1", "p2");
    this.tournament.addMatch("p1", "p3");
    this.tournament.addMatch("p1", "p4");
    matrix = this.tournament.getMatchMatrixForPlayers(this.players);
    matrixSize = Object.keys(matrix.matches).length;
    equal(matrixSize, 7);
    singularMatches = matrix.getSingularMatches();
    singularMatchesSize = Object.keys(singularMatches).length;
    return equal(singularMatchesSize, 1);
  });

  test("Remove player matches", function() {
    var matrix, matrixSize, player1;
    matrix = this.tournament.getMatchMatrixForPlayers(this.players);
    player1 = this.tournament.getPlayer("p1");
    matrix.removePlayerMatches(player1);
    matrixSize = Object.keys(matrix.matches).length;
    equal(matrixSize, 6);
    equal(Object.keys(matrix.matrix["p2"]).length, 3);
    equal(Object.keys(matrix.matrix["p3"]).length, 3);
    return equal(Object.keys(matrix.matrix["p4"]).length, 3);
  });

  module("Round", {
    setup: function() {
      this.tournament = new SwissTournament;
      this.tournament.addPlayer("Anna", "Crab");
      this.tournament.addPlayer("Bob", "Crane");
      this.tournament.addPlayer("Claude", "Dragon");
      this.tournament.addPlayer("Dennis", "Lion");
      this.tournament.addPlayer("Eliot", "Mantis");
      this.tournament.addPlayer("Francis", "Phoenix");
      this.tournament.addPlayer("George", "Scorpion");
      this.tournament.addPlayer("Henry", "Spider");
      this.tournament.addPlayer("Irvine", "Unaligned");
      return this.tournament.addPlayer("Juliet", "Unaligned");
    }
  });

  test("Add round", function() {
    this.tournament.addRound();
    return equal(this.tournament.rounds.length, 1);
  });

  test("Get round", function() {
    this.tournament.addRound();
    return ok(this.tournament.getRound(1));
  });

  test("Add match to round", function() {
    var round;
    this.tournament.addRound();
    round = this.tournament.getRound(1);
    round.addMatch("p1", "p2");
    return ok(round.matches["m_p1@p2"]);
  });

  module("Ranking", {
    setup: function() {
      this.tournament = new SwissTournament;
      this.tournament.addPlayer("Anna", "Crab");
      this.tournament.addPlayer("Bob", "Crane");
      this.tournament.addPlayer("Claude", "Dragon");
      this.tournament.addPlayer("Dennis", "Lion");
      this.tournament.addPlayer("Eliot", "Mantis");
      this.tournament.addPlayer("Francis", "Phoenix");
      this.tournament.addPlayer("George", "Scorpion");
      this.tournament.addPlayer("Henry", "Spider");
      this.tournament.addPlayer("Irvine", "Unaligned");
      return this.tournament.addPlayer("Juliet", "Unaligned");
    }
  });

  test("Rank players with ms", function() {
    var anna, bob, claude, dennis, eliot, francis, george, henry, irvine, juliet, ranking;
    anna = this.tournament.getPlayer("p1");
    bob = this.tournament.getPlayer("p2");
    claude = this.tournament.getPlayer("p3");
    dennis = this.tournament.getPlayer("p4");
    eliot = this.tournament.getPlayer("p5");
    francis = this.tournament.getPlayer("p6");
    george = this.tournament.getPlayer("p7");
    henry = this.tournament.getPlayer("p8");
    irvine = this.tournament.getPlayer("p9");
    juliet = this.tournament.getPlayer("p10");
    this.tournament.addMatch(dennis.id, juliet.id).reportWinner(juliet);
    this.tournament.addMatch(francis.id, irvine.id).reportWinner(irvine);
    this.tournament.addMatch(bob.id, henry.id).reportWinner(henry);
    this.tournament.addMatch(anna.id, claude.id).reportWinner(claude);
    this.tournament.addMatch(eliot.id, george.id).reportWinner(george);
    this.tournament.addMatch(irvine.id, juliet.id).reportWinner(juliet);
    this.tournament.addMatch(henry.id, george.id).reportWinner(henry);
    this.tournament.addMatch(dennis.id, claude.id).reportWinner(dennis);
    this.tournament.addMatch(bob.id, francis.id).reportWinner(francis);
    this.tournament.addMatch(anna.id, eliot.id).reportWinner(eliot);
    this.tournament.addMatch(henry.id, juliet.id).reportWinner(juliet);
    this.tournament.addMatch(george.id, irvine.id).reportWinner(irvine);
    this.tournament.addMatch(claude.id, francis.id).reportWinner(francis);
    this.tournament.addMatch(dennis.id, eliot.id).reportWinner(eliot);
    this.tournament.addMatch(anna.id, bob.id).reportWinner(bob);
    this.tournament.addMatch(francis.id, juliet.id).reportWinner(juliet);
    this.tournament.addMatch(eliot.id, irvine.id).reportWinner(irvine);
    this.tournament.addMatch(claude.id, henry.id).reportWinner(henry);
    this.tournament.addMatch(bob.id, george.id).reportWinner(george);
    this.tournament.addMatch(anna.id, dennis.id).reportWinner(dennis);
    ranking = this.tournament.getRankedPlayers();
    equal(juliet.points, 4, "juliet points");
    equal(irvine.points, 3, "irvine points");
    equal(henry.points, 3, "henry points");
    equal(george.points, 2, "george points");
    equal(francis.points, 2, "francis points");
    equal(eliot.points, 2, "eliot points");
    equal(dennis.points, 2, "dennis points");
    equal(claude.points, 1, "claude points");
    equal(bob.points, 1, "bob points");
    equal(anna.points, 0, "anna points");
    equal(juliet.ms.total, 10, "juliet ms total");
    equal(irvine.ms.total, 10, "irvine ms total");
    equal(henry.ms.total, 8, "henry ms total");
    equal(george.ms.total, 9, "george ms total");
    equal(francis.ms.total, 9, "francis ms total");
    equal(eliot.ms.total, 7, "eliot ms total");
    equal(dennis.ms.total, 7, "dennis ms total");
    equal(claude.ms.total, 7, "claude ms total");
    equal(bob.ms.total, 7, "bob ms total");
    equal(anna.ms.total, 6, "anna ms total");
    equal(ranking[0].name, "Juliet", "Juliet ranking");
    equal(ranking[1].name, "Irvine", "Irvine ranking");
    equal(ranking[2].name, "Henry", "Henry ranking");
    equal(ranking[3].name, "George", "George ranking");
    equal(ranking[4].name, "Francis", "Francis ranking");
    equal(ranking[5].name, "Eliot", "Eliot ranking");
    equal(ranking[6].name, "Dennis", "Dennis ranking");
    equal(ranking[7].name, "Claude", "Claude ranking");
    equal(ranking[8].name, "Bob", "Bob ranking");
    return equal(ranking[9].name, "Anna", "Anna ranking");
  });

}).call(this);
